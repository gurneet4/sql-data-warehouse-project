create view gold.report_products as
with base_query as(
Select
f.order_number,
p.product_key,
f.order_date,
f.customer_key,
f.sales,
f.quantity,
f.price,
p.product_name,
p.category_id,
p.category,
p.subcategory,
p.cost
from gold.fact_sales f
left join gold.dim_products p
on f.product_key = p.product_key
where order_date is not null),
product_aggregations as(
select
product_key,
product_name,
category_id,
category,
subcategory,
cost,
datediff(month, min(order_date), max(order_date)) Timespan,
max(order_date) last_order_date,
count(distinct order_number) total_orders,
count(distinct customer_key) total_customers,
sum(sales) total_sales,
sum(quantity) total_quantity,
round(avg(cast(sales as float)/nullif(quantity,0)),0) as avg_selling_price
from base_query
group by product_key,
product_name,
category_id,
category,
subcategory,
cost)
select
product_key,
product_name,
category_id,
category,
subcategory,
cost,
last_order_date,
datediff(month, last_order_date, getdate()) as recency,
case
when total_sales > 50000 then 'high-performing'
when total_sales >= 10000 then 'mid-performing'
else 'low-performing'
end as product_segment,
timespan,
total_orders,
total_sales,
total_quantity,
total_customers,
avg_selling_price,
case when total_orders = 0 then 0
else  total_sales/total_orders
end as avg_order_revenue,
case when timespan = 0 then total_Sales
else total_sales/timespan
end as avg_monthly_revenue
from product_aggregations
